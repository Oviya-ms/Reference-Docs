Arrays
-----------

1. Largest of 'n' numbers in an array
// To find the largest of'n' numbers
start
1.Enter n value
2.Enter array elements
3. Print all the elements in thearray
4. large = arr[0];
5. for(i=1; i<=n-1; i++)
{
       if (arr[i] > large)
		large= arr[i]
}
print large
 
-------------------
2. //Find out thelargest or smallest of 'n'numbers based on the choice
NOTE : L/l - largest
       S/s smallest
else invalid choice
Using switch case
-----------------------

3. //Arrange the 'n' elements in ascending order
start
1.Enter n value
2.Enter array elements
3. Print all the elements in thearray
4. for (i=0; i< n-1; i++)
{
   for (j = i+1; j<n; j++)
   {
       if (a[i] > a[j])
       {
         temp = a[i]
	a[i] = a[j]
	a[j] = temp
        }
   }
}
 
5. print the resultant array

------------

4.
// Arrange the array elements in ascending order or descending order on the choice
NOTE : A/a - ascending order
       S/s - descending order
else invalid choice
Using if ... else if statement
-----------------------
-----------------------


Strings, Functions
-------------------

1. Program to arrange the set of names in alphabetical order
//Arrange the 'n' string names in alphabetical order
1. start
2.Enter number of names
3.Enter array of names
4. Print all the names in the array
5. for (i=0; i< n-1; i++)
{
   for (j = i+1; j<n; j++)
   {
       if (names[i] > names[j])
       {
         temp = names[i]
	names[i] = names[j] 
	names[j] = temp   
        }
   }
}
6. Print the arranged names
7. End
 
NOTE:  use swap function to interchange the names
swap(names[i], names[j])

2. Program to count number of vowels in a string
Algorithm: Count Number of Vowels in a String
Step 1: Start
Step 2: Input the string
Step 3: Initialize a counter variable vowelCount to 0
Step 4: Repeat for each character ch in the string:
      → Convert ch to lowercase (optional, for case-insensitive comparison)
      → If ch is 'a' or 'e' or 'i' or 'o' or 'u', increment vowelCount
Step 5: After the loop ends, output vowelCount
Step 6: End

3. Program to check the string is palindrome or not 
Algorithm Steps:
Step 1: Start
Step 2: Input the string str
Step 3: Initialize two index variables:
      start = 0 and end = length of str - 1
Step 4: Repeat while start < end
    → If str[start] != str[end], then
      → The string is not a palindrome → Exit
    → Else, increment start and decrement end
Step 5: If the loop completes, the string is a palindrome
Step 6: End

4. Program to find out the volume of the cube, cuboid, sphere and cone using Function Overloading(Static polymorphism) concept
NOTE: Have a same function called "volume()", with different signatures(arguments with different data type) 

Volume of cone  : v = 1/3 * 3.14 * r^2 h
Volume cube : v = a^3
Volume of cuboid : v = length * breadth * height
Volume of the sphere : v = 4/3 * 3.14 r^3

5. Rewrite the same program using classes and objects

